//
// Standard Library Tests
//

.assert 0x0000 == bitrange(0, 0)
.assert 0x0029 == bitrange(9, 10)
.assert 0x000A == bitrange(10, 10)
.assert 0x004A == bitrange(10, 12)

.assert 0x0000 == pinrange(0, 0)
.assert 0x0040 == pinrange(0, 1)
.assert 0x0242 == pinrange(2, 11)
.assert 0x0242 == pinrange(2, 11)
.assert 0x0049 == pinrange(9, 10)
.assert 0x02E2 == pinrange(34, 45)

.assert 0x017C == pinrange(60, 33, wrap=#on)
.assert 0x011C == pinrange(28, 0, wrap=#on)

.assert 300_000_000 == ticks(s=1, clk=300_000_000)
.assert 299_999_998 == ticks(s=1, clk=300_000_000, waitx=#on)

.assert 300_000_000 == ticks(s=1, clk=300_000_000)
.assert 300_000_000 == ticks(ms=1_000, clk=300_000_000)
.assert 300_000_000 == ticks(us=1_000_000, clk=300_000_000)
.assert 300_000_000 == ticks(ns=1_000_000_000, clk=300_000_000)
.assert 600_000_000 == ticks(s=1, ms=500, us=250_000, ns=250_000_000, clk=300_000_000)

// 28571 ns @ 300 MHz = 8571.3 clocks
.assert 8571 == ticks(ns=28571, clk=300_000_000, round=#floor)
.assert 8571 == ticks(ns=28571, clk=300_000_000, round=#nearest)
.assert 8572 == ticks(ns=28571, clk=300_000_000, round=#ceil)

// 28572 ns @ 300 MHz = 8571.6 clocks
.assert 8571 == ticks(ns=28572, clk=300_000_000, round=#floor)
.assert 8572 == ticks(ns=28572, clk=300_000_000, round=#nearest)
.assert 8572 == ticks(ns=28572, clk=300_000_000, round=#ceil)


// Test with the default values from the datasheet
.assert 0x4000_0000 == Hub.setFilter(filter=#filt0, length=2, tap=0)  // $4000_0000 + 0<<5 + 0
.assert 0x4000_00A5 == Hub.setFilter(filter=#filt1, length=3, tap=5)  // $4000_0080 + 1<<5 + 5
.assert 0x4000_0153 == Hub.setFilter(filter=#filt2, length=5, tap=19) // $4000_0100 + 2<<5 + 19
.assert 0x4000_01F6 == Hub.setFilter(filter=#filt3, length=8, tap=22) // $4000_0180 + 3<<5 + 22

.assert 0x1000_0000 == Hub.reboot() // assuming all trailing bits are 0

.assert 0x8000_0000 == Hub.seedRng(0x0000_0000) // set all trailing bits 0
.assert 0xAAAA_AAAA == Hub.seedRng(0x2AAA_AAAA) // set all trailing bits to 01010101â€¦
.assert 0xFFFF_FFFF == Hub.seedRng(0x7FFF_FFFF) // set all trailing bits 1

.assert 0x2000_0001 == Hub.debugConfig(debug_enable=0b0000_0000_0000_0001) // 'enable debug interrupt for cog 0
.assert 0x2001_FFFF == Hub.debugConfig(debug_enable=0xFFFF, write_protect=#on) // 'enable debug interrupts for cogs 15..0 and write-protect the last 16KB of hub RAM
.assert 0x2003_00FF == Hub.debugConfig(debug_enable=0x00FF, write_protect=#on, lock=#on) // enable debug interrupts for cogs 7..0
                                                                                         // ..and write-protect the last 16KB of hub RAM
                                                                                         // ..and disallow subsequent changes to this scheme

.assert 0x0000_00F0 == Hub.clockMode(pll=#off, in_div=1,  mul=1,   out_div=1, xi=#float, sysclk=#rcfast) // set 20 MHz+ (RCFAST) mode
.assert 0x019D_28F8 == Hub.clockMode(pll=#on,  in_div=40, mul=297, out_div=1, xi=#15pF,  sysclk=#rcfast) // enable crystal+PLL, stay in RCFAST mode
.assert 0x019D_28FB == Hub.clockMode(pll=#on,  in_div=40, mul=297, out_div=1, xi=#15pF,  sysclk=#pll)    // now switch to PLL running at 148.5 MHz


// Test the two examples from the datasheet:
.assert 0x0007_8007 == SmartPin.UartTx.config(baud=2, bits=8, clk=15) // 7.5 clocks must be 0x00078000+7
.assert 0x0007_8007 == SmartPin.UartTx.config(baud=2, clk=15) // bits should default to 8
.assert 0x0021_540F == SmartPin.UartRx.config(baud=3, bits=16, clk=100) // 33.33 clocks must be 0x00215400+15
