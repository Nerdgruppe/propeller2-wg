//!
//! AUTOGENERATED CODE!
//! This code was autogenerated by utility/gen_windtunnel.py decoder
//!
const std = @import("std");

const encoding = @import("encoding.zig");

///
/// Enumeration of all valid opcodes.
///
pub const OpCode = enum {
    invalid,
    abs,
    add,
    addct1,
    addct2,
    addct3,
    addpix,
    adds,
    addsx,
    addx,
    allowi,
    altb,
    altd,
    altgb,
    altgn,
    altgw,
    alti,
    altr,
    alts,
    altsb,
    altsn,
    altsw,
    @"and",
    andn,
    augd,
    augs,
    bitc,
    bith,
    bitl,
    bitnc,
    bitnot,
    bitnz,
    bitrnd,
    bitz,
    blnpix,
    bmask,
    brk,
    call_a,
    call_d,
    calla_a,
    calla_d,
    callb_a,
    callb_d,
    calld_a,
    calld_s,
    callpa,
    callpb,
    cmp,
    cmpm,
    cmpr,
    cmps,
    cmpsub,
    cmpsx,
    cmpx,
    cogatn,
    cogbrk,
    cogid,
    coginit,
    cogstop,
    crcbit,
    crcnib,
    decmod,
    decod,
    dirc,
    dirh,
    dirl,
    dirnc,
    dirnot,
    dirnz,
    dirrnd,
    dirz,
    djf,
    djnf,
    djnz,
    djz,
    drvc,
    drvh,
    drvl,
    drvnc,
    drvnot,
    drvnz,
    drvrnd,
    drvz,
    encod,
    execf,
    fblock,
    fge,
    fges,
    fle,
    fles,
    fltc,
    flth,
    fltl,
    fltnc,
    fltnot,
    fltnz,
    fltrnd,
    fltz,
    getbrk,
    getbyte,
    getct,
    getnib,
    getptr,
    getqx,
    getqy,
    getrnd,
    getscp,
    getword,
    getxacc,
    hubset,
    ijnz,
    ijz,
    incmod,
    jatn,
    jct1,
    jct2,
    jct3,
    jfbw,
    jint,
    jmp_a,
    jmp_d,
    jmprel,
    jnatn,
    jnct1,
    jnct2,
    jnct3,
    jnfbw,
    jnint,
    jnpat,
    jnqmt,
    jnse1,
    jnse2,
    jnse3,
    jnse4,
    jnxfi,
    jnxmt,
    jnxrl,
    jnxro,
    jpat,
    jqmt,
    jse1,
    jse2,
    jse3,
    jse4,
    jxfi,
    jxmt,
    jxrl,
    jxro,
    loc,
    locknew,
    lockrel,
    lockret,
    locktry,
    mergeb,
    mergew,
    mixpix,
    modcz,
    mov,
    movbyts,
    mul,
    mulpix,
    muls,
    muxc,
    muxnc,
    muxnibs,
    muxnits,
    muxnz,
    muxq,
    muxz,
    neg,
    negc,
    negnc,
    negnz,
    negz,
    nixint1,
    nixint2,
    nixint3,
    nop,
    not,
    ones,
    @"or",
    outc,
    outh,
    outl,
    outnc,
    outnot,
    outnz,
    outrnd,
    outz,
    pollatn,
    pollct1,
    pollct2,
    pollct3,
    pollfbw,
    pollint,
    pollpat,
    pollqmt,
    pollse1,
    pollse2,
    pollse3,
    pollse4,
    pollxfi,
    pollxmt,
    pollxrl,
    pollxro,
    pop,
    push,
    qdiv,
    qexp,
    qfrac,
    qlog,
    qmul,
    qrotate,
    qsqrt,
    qvector,
    rcl,
    rcr,
    rczl,
    rczr,
    rdbyte,
    rdfast,
    rdlong,
    rdlut,
    rdpin,
    rdword,
    rep,
    ret,
    reta,
    retb,
    rev,
    rfbyte,
    rflong,
    rfvar,
    rfvars,
    rfword,
    rgbexp,
    rgbsqz,
    rol,
    rolbyte,
    rolnib,
    rolword,
    ror,
    rqpin,
    sal,
    sar,
    sca,
    scas,
    setbyte,
    setcfrq,
    setci,
    setcmod,
    setcq,
    setcy,
    setd,
    setdacs,
    setint1,
    setint2,
    setint3,
    setluts,
    setnib,
    setpat,
    setpiv,
    setpix,
    setq,
    setq2,
    setr,
    sets,
    setscp,
    setse1,
    setse2,
    setse3,
    setse4,
    setword,
    setxfrq,
    seussf,
    seussr,
    shl,
    shr,
    signx,
    skip,
    skipf,
    splitb,
    splitw,
    stalli,
    sub,
    subr,
    subs,
    subsx,
    subx,
    sumc,
    sumnc,
    sumnz,
    sumz,
    @"test",
    testb,
    testb_and,
    testb_or,
    testb_xor,
    testbn,
    testbn_and,
    testbn_or,
    testbn_xor,
    testn,
    testp,
    testp_and,
    testp_or,
    testp_xor,
    testpn,
    testpn_and,
    testpn_or,
    testpn_xor,
    tjf,
    tjnf,
    tjns,
    tjnz,
    tjs,
    tjv,
    tjz,
    trgint1,
    trgint2,
    trgint3,
    waitatn,
    waitct1,
    waitct2,
    waitct3,
    waitfbw,
    waitint,
    waitpat,
    waitse1,
    waitse2,
    waitse3,
    waitse4,
    waitx,
    waitxfi,
    waitxmt,
    waitxrl,
    waitxro,
    wfbyte,
    wflong,
    wfword,
    wmlong,
    wrbyte,
    wrc,
    wrfast,
    wrlong,
    wrlut,
    wrnc,
    wrnz,
    wrpin,
    wrword,
    wrz,
    wxpin,
    wypin,
    xcont,
    xinit,
    xor,
    xoro32,
    xzero,
    zerox,
};

///
/// A mapping between opcode and the active field of the Instruction union.
///
pub const instruction_type: std.EnumArray(OpCode, []const u8) = blk: {
    @setEvalBranchQuota(10_000);
    break :blk .init(.{
        .invalid = "",
        .abs = "both_d_simm_flags",
        .add = "both_d_simm_flags",
        .addct1 = "both_d_simm",
        .addct2 = "both_d_simm",
        .addct3 = "both_d_simm",
        .addpix = "both_d_simm",
        .adds = "both_d_simm_flags",
        .addsx = "both_d_simm_flags",
        .addx = "both_d_simm_flags",
        .allowi = "no_operands",
        .altb = "both_d_simm",
        .altd = "both_d_simm",
        .altgb = "both_d_simm",
        .altgn = "both_d_simm",
        .altgw = "both_d_simm",
        .alti = "both_d_simm",
        .altr = "both_d_simm",
        .alts = "both_d_simm",
        .altsb = "both_d_simm",
        .altsn = "both_d_simm",
        .altsw = "both_d_simm",
        .@"and" = "both_d_simm_flags",
        .andn = "both_d_simm_flags",
        .augd = "augment",
        .augs = "augment",
        .bitc = "both_d_simm_flags",
        .bith = "both_d_simm_flags",
        .bitl = "both_d_simm_flags",
        .bitnc = "both_d_simm_flags",
        .bitnot = "both_d_simm_flags",
        .bitnz = "both_d_simm_flags",
        .bitrnd = "both_d_simm_flags",
        .bitz = "both_d_simm_flags",
        .blnpix = "both_d_simm",
        .bmask = "both_d_simm",
        .brk = "only_dimm",
        .call_a = "abs_pointer",
        .call_d = "only_d_flags",
        .calla_a = "abs_pointer",
        .calla_d = "only_d_flags",
        .callb_a = "abs_pointer",
        .callb_d = "only_d_flags",
        .calld_a = "loc_style",
        .calld_s = "both_d_simm_flags",
        .callpa = "both_dimm_simm",
        .callpb = "both_dimm_simm",
        .cmp = "both_d_simm_flags",
        .cmpm = "both_d_simm_flags",
        .cmpr = "both_d_simm_flags",
        .cmps = "both_d_simm_flags",
        .cmpsub = "both_d_simm_flags",
        .cmpsx = "both_d_simm_flags",
        .cmpx = "both_d_simm_flags",
        .cogatn = "only_dimm",
        .cogbrk = "only_dimm",
        .cogid = "only_dimm_cflag",
        .coginit = "both_dimm_simm_cflag",
        .cogstop = "only_dimm",
        .crcbit = "both_d_simm",
        .crcnib = "both_d_simm",
        .decmod = "both_d_simm_flags",
        .decod = "both_d_simm",
        .dirc = "only_dimm_flags",
        .dirh = "only_dimm_flags",
        .dirl = "only_dimm_flags",
        .dirnc = "only_dimm_flags",
        .dirnot = "only_dimm_flags",
        .dirnz = "only_dimm_flags",
        .dirrnd = "only_dimm_flags",
        .dirz = "only_dimm_flags",
        .djf = "both_d_simm",
        .djnf = "both_d_simm",
        .djnz = "both_d_simm",
        .djz = "both_d_simm",
        .drvc = "only_dimm_flags",
        .drvh = "only_dimm_flags",
        .drvl = "only_dimm_flags",
        .drvnc = "only_dimm_flags",
        .drvnot = "only_dimm_flags",
        .drvnz = "only_dimm_flags",
        .drvrnd = "only_dimm_flags",
        .drvz = "only_dimm_flags",
        .encod = "both_d_simm_flags",
        .execf = "only_dimm",
        .fblock = "both_dimm_simm",
        .fge = "both_d_simm_flags",
        .fges = "both_d_simm_flags",
        .fle = "both_d_simm_flags",
        .fles = "both_d_simm_flags",
        .fltc = "only_dimm_flags",
        .flth = "only_dimm_flags",
        .fltl = "only_dimm_flags",
        .fltnc = "only_dimm_flags",
        .fltnot = "only_dimm_flags",
        .fltnz = "only_dimm_flags",
        .fltrnd = "only_dimm_flags",
        .fltz = "only_dimm_flags",
        .getbrk = "only_d_flags",
        .getbyte = "both_d_simm_n2",
        .getct = "only_d_cflag",
        .getnib = "both_d_simm_n3",
        .getptr = "only_d",
        .getqx = "only_d_flags",
        .getqy = "only_d_flags",
        .getrnd = "only_d_flags",
        .getscp = "only_d",
        .getword = "both_d_simm_n1",
        .getxacc = "only_d",
        .hubset = "only_dimm",
        .ijnz = "both_d_simm",
        .ijz = "both_d_simm",
        .incmod = "both_d_simm_flags",
        .jatn = "only_simm",
        .jct1 = "only_simm",
        .jct2 = "only_simm",
        .jct3 = "only_simm",
        .jfbw = "only_simm",
        .jint = "only_simm",
        .jmp_a = "abs_pointer",
        .jmp_d = "only_d_flags",
        .jmprel = "only_dimm",
        .jnatn = "only_simm",
        .jnct1 = "only_simm",
        .jnct2 = "only_simm",
        .jnct3 = "only_simm",
        .jnfbw = "only_simm",
        .jnint = "only_simm",
        .jnpat = "only_simm",
        .jnqmt = "only_simm",
        .jnse1 = "only_simm",
        .jnse2 = "only_simm",
        .jnse3 = "only_simm",
        .jnse4 = "only_simm",
        .jnxfi = "only_simm",
        .jnxmt = "only_simm",
        .jnxrl = "only_simm",
        .jnxro = "only_simm",
        .jpat = "only_simm",
        .jqmt = "only_simm",
        .jse1 = "only_simm",
        .jse2 = "only_simm",
        .jse3 = "only_simm",
        .jse4 = "only_simm",
        .jxfi = "only_simm",
        .jxmt = "only_simm",
        .jxrl = "only_simm",
        .jxro = "only_simm",
        .loc = "loc_style",
        .locknew = "only_d_cflag",
        .lockrel = "only_dimm_cflag",
        .lockret = "only_dimm",
        .locktry = "only_dimm_cflag",
        .mergeb = "only_d",
        .mergew = "only_d",
        .mixpix = "both_d_simm",
        .modcz = "update_flags",
        .mov = "both_d_simm_flags",
        .movbyts = "both_d_simm",
        .mul = "both_d_simm_zflag",
        .mulpix = "both_d_simm",
        .muls = "both_d_simm_zflag",
        .muxc = "both_d_simm_flags",
        .muxnc = "both_d_simm_flags",
        .muxnibs = "both_d_simm",
        .muxnits = "both_d_simm",
        .muxnz = "both_d_simm_flags",
        .muxq = "both_d_simm",
        .muxz = "both_d_simm_flags",
        .neg = "both_d_simm_flags",
        .negc = "both_d_simm_flags",
        .negnc = "both_d_simm_flags",
        .negnz = "both_d_simm_flags",
        .negz = "both_d_simm_flags",
        .nixint1 = "no_operands",
        .nixint2 = "no_operands",
        .nixint3 = "no_operands",
        .nop = "nop",
        .not = "both_d_simm_flags",
        .ones = "both_d_simm_flags",
        .@"or" = "both_d_simm_flags",
        .outc = "only_dimm_flags",
        .outh = "only_dimm_flags",
        .outl = "only_dimm_flags",
        .outnc = "only_dimm_flags",
        .outnot = "only_dimm_flags",
        .outnz = "only_dimm_flags",
        .outrnd = "only_dimm_flags",
        .outz = "only_dimm_flags",
        .pollatn = "only_flags",
        .pollct1 = "only_flags",
        .pollct2 = "only_flags",
        .pollct3 = "only_flags",
        .pollfbw = "only_flags",
        .pollint = "only_flags",
        .pollpat = "only_flags",
        .pollqmt = "only_flags",
        .pollse1 = "only_flags",
        .pollse2 = "only_flags",
        .pollse3 = "only_flags",
        .pollse4 = "only_flags",
        .pollxfi = "only_flags",
        .pollxmt = "only_flags",
        .pollxrl = "only_flags",
        .pollxro = "only_flags",
        .pop = "only_d_flags",
        .push = "only_dimm",
        .qdiv = "both_dimm_simm",
        .qexp = "only_dimm",
        .qfrac = "both_dimm_simm",
        .qlog = "only_dimm",
        .qmul = "both_dimm_simm",
        .qrotate = "both_dimm_simm",
        .qsqrt = "both_dimm_simm",
        .qvector = "both_dimm_simm",
        .rcl = "both_d_simm_flags",
        .rcr = "both_d_simm_flags",
        .rczl = "only_d_flags",
        .rczr = "only_d_flags",
        .rdbyte = "both_d_simm_flags",
        .rdfast = "both_dimm_simm",
        .rdlong = "both_d_simm_flags",
        .rdlut = "both_d_simm_flags",
        .rdpin = "both_d_simm_cflag",
        .rdword = "both_d_simm_flags",
        .rep = "both_dimm_simm",
        .ret = "only_flags",
        .reta = "only_flags",
        .retb = "only_flags",
        .rev = "only_d",
        .rfbyte = "only_d_flags",
        .rflong = "only_d_flags",
        .rfvar = "only_d_flags",
        .rfvars = "only_d_flags",
        .rfword = "only_d_flags",
        .rgbexp = "only_d",
        .rgbsqz = "only_d",
        .rol = "both_d_simm_flags",
        .rolbyte = "both_d_simm_n2",
        .rolnib = "both_d_simm_n3",
        .rolword = "both_d_simm_n1",
        .ror = "both_d_simm_flags",
        .rqpin = "both_d_simm_cflag",
        .sal = "both_d_simm_flags",
        .sar = "both_d_simm_flags",
        .sca = "both_d_simm_zflag",
        .scas = "both_d_simm_zflag",
        .setbyte = "both_d_simm_n2",
        .setcfrq = "only_dimm",
        .setci = "only_dimm",
        .setcmod = "only_dimm",
        .setcq = "only_dimm",
        .setcy = "only_dimm",
        .setd = "both_d_simm",
        .setdacs = "only_dimm",
        .setint1 = "only_dimm",
        .setint2 = "only_dimm",
        .setint3 = "only_dimm",
        .setluts = "only_dimm",
        .setnib = "both_d_simm_n3",
        .setpat = "both_dimm_simm",
        .setpiv = "only_dimm",
        .setpix = "only_dimm",
        .setq = "only_dimm",
        .setq2 = "only_dimm",
        .setr = "both_d_simm",
        .sets = "both_d_simm",
        .setscp = "only_dimm",
        .setse1 = "only_dimm",
        .setse2 = "only_dimm",
        .setse3 = "only_dimm",
        .setse4 = "only_dimm",
        .setword = "both_d_simm_n1",
        .setxfrq = "only_dimm",
        .seussf = "only_d",
        .seussr = "only_d",
        .shl = "both_d_simm_flags",
        .shr = "both_d_simm_flags",
        .signx = "both_d_simm_flags",
        .skip = "only_dimm",
        .skipf = "only_dimm",
        .splitb = "only_d",
        .splitw = "only_d",
        .stalli = "no_operands",
        .sub = "both_d_simm_flags",
        .subr = "both_d_simm_flags",
        .subs = "both_d_simm_flags",
        .subsx = "both_d_simm_flags",
        .subx = "both_d_simm_flags",
        .sumc = "both_d_simm_flags",
        .sumnc = "both_d_simm_flags",
        .sumnz = "both_d_simm_flags",
        .sumz = "both_d_simm_flags",
        .@"test" = "both_d_simm_flags",
        .testb = "both_d_simm_flags",
        .testb_and = "both_d_simm_flags",
        .testb_or = "both_d_simm_flags",
        .testb_xor = "both_d_simm_flags",
        .testbn = "both_d_simm_flags",
        .testbn_and = "both_d_simm_flags",
        .testbn_or = "both_d_simm_flags",
        .testbn_xor = "both_d_simm_flags",
        .testn = "both_d_simm_flags",
        .testp = "only_dimm_flags",
        .testp_and = "only_dimm_flags",
        .testp_or = "only_dimm_flags",
        .testp_xor = "only_dimm_flags",
        .testpn = "only_dimm_flags",
        .testpn_and = "only_dimm_flags",
        .testpn_or = "only_dimm_flags",
        .testpn_xor = "only_dimm_flags",
        .tjf = "both_d_simm",
        .tjnf = "both_d_simm",
        .tjns = "both_d_simm",
        .tjnz = "both_d_simm",
        .tjs = "both_d_simm",
        .tjv = "both_d_simm",
        .tjz = "both_d_simm",
        .trgint1 = "no_operands",
        .trgint2 = "no_operands",
        .trgint3 = "no_operands",
        .waitatn = "only_flags",
        .waitct1 = "only_flags",
        .waitct2 = "only_flags",
        .waitct3 = "only_flags",
        .waitfbw = "only_flags",
        .waitint = "only_flags",
        .waitpat = "only_flags",
        .waitse1 = "only_flags",
        .waitse2 = "only_flags",
        .waitse3 = "only_flags",
        .waitse4 = "only_flags",
        .waitx = "only_dimm_flags",
        .waitxfi = "only_flags",
        .waitxmt = "only_flags",
        .waitxrl = "only_flags",
        .waitxro = "only_flags",
        .wfbyte = "only_dimm",
        .wflong = "only_dimm",
        .wfword = "only_dimm",
        .wmlong = "both_d_simm",
        .wrbyte = "both_dimm_simm",
        .wrc = "only_d",
        .wrfast = "both_dimm_simm",
        .wrlong = "both_dimm_simm",
        .wrlut = "both_dimm_simm",
        .wrnc = "only_d",
        .wrnz = "only_d",
        .wrpin = "both_dimm_simm",
        .wrword = "both_dimm_simm",
        .wrz = "only_d",
        .wxpin = "both_dimm_simm",
        .wypin = "both_dimm_simm",
        .xcont = "both_dimm_simm",
        .xinit = "both_dimm_simm",
        .xor = "both_d_simm_flags",
        .xoro32 = "only_d",
        .xzero = "both_dimm_simm",
        .zerox = "both_d_simm_flags",
    });
};

pub fn decode(raw: u32) OpCode {
    if (raw == 0x00000000)
        return .nop;
    if ((raw & 0x0F800000) == 0x0E000000)
        return .calld_a;
    if ((raw & 0x0F800000) == 0x0E800000)
        return .loc;
    if ((raw & 0x0F800000) == 0x0F000000)
        return .augs;
    if ((raw & 0x0F800000) == 0x0F800000)
        return .augd;
    if ((raw & 0x0FC00000) == 0x08000000)
        return .setnib;
    if ((raw & 0x0FC00000) == 0x08400000)
        return .getnib;
    if ((raw & 0x0FC00000) == 0x08800000)
        return .rolnib;
    if ((raw & 0x0FE00000) == 0x00200000)
        return .rol;
    if ((raw & 0x0FE00000) == 0x00400000)
        return .shr;
    if ((raw & 0x0FE00000) == 0x00600000)
        return .shl;
    if ((raw & 0x0FE00000) == 0x00800000)
        return .rcr;
    if ((raw & 0x0FE00000) == 0x00A00000)
        return .rcl;
    if ((raw & 0x0FE00000) == 0x00C00000)
        return .sar;
    if ((raw & 0x0FE00000) == 0x00E00000)
        return .sal;
    if ((raw & 0x0FE00000) == 0x01000000)
        return .add;
    if ((raw & 0x0FE00000) == 0x01200000)
        return .addx;
    if ((raw & 0x0FE00000) == 0x01400000)
        return .adds;
    if ((raw & 0x0FE00000) == 0x01600000)
        return .addsx;
    if ((raw & 0x0FE00000) == 0x01800000)
        return .sub;
    if ((raw & 0x0FE00000) == 0x01A00000)
        return .subx;
    if ((raw & 0x0FE00000) == 0x01C00000)
        return .subs;
    if ((raw & 0x0FE00000) == 0x01E00000)
        return .subsx;
    if ((raw & 0x0FE00000) == 0x02000000)
        return .cmp;
    if ((raw & 0x0FE00000) == 0x02200000)
        return .cmpx;
    if ((raw & 0x0FE00000) == 0x02400000)
        return .cmps;
    if ((raw & 0x0FE00000) == 0x02600000)
        return .cmpsx;
    if ((raw & 0x0FE00000) == 0x02800000)
        return .cmpr;
    if ((raw & 0x0FE00000) == 0x02A00000)
        return .cmpm;
    if ((raw & 0x0FE00000) == 0x02C00000)
        return .subr;
    if ((raw & 0x0FE00000) == 0x02E00000)
        return .cmpsub;
    if ((raw & 0x0FE00000) == 0x03000000)
        return .fge;
    if ((raw & 0x0FE00000) == 0x03200000)
        return .fle;
    if ((raw & 0x0FE00000) == 0x03400000)
        return .fges;
    if ((raw & 0x0FE00000) == 0x03600000)
        return .fles;
    if ((raw & 0x0FE00000) == 0x03800000)
        return .sumc;
    if ((raw & 0x0FE00000) == 0x03A00000)
        return .sumnc;
    if ((raw & 0x0FE00000) == 0x03C00000)
        return .sumz;
    if ((raw & 0x0FE00000) == 0x03E00000)
        return .sumnz;
    if ((raw & 0x0FE00000) == 0x04000000)
        return .testb;
    if ((raw & 0x0FE00000) == 0x04200000)
        return .testbn;
    if ((raw & 0x0FE00000) == 0x04400000)
        return .testb_and;
    if ((raw & 0x0FE00000) == 0x04600000)
        return .testbn_and;
    if ((raw & 0x0FE00000) == 0x04800000)
        return .testb_or;
    if ((raw & 0x0FE00000) == 0x04A00000)
        return .testbn_or;
    if ((raw & 0x0FE00000) == 0x04C00000)
        return .testb_xor;
    if ((raw & 0x0FE00000) == 0x04E00000)
        return .testbn_xor;
    if ((raw & 0x0FE00000) == 0x04000000)
        return .bitl;
    if ((raw & 0x0FE00000) == 0x04200000)
        return .bith;
    if ((raw & 0x0FE00000) == 0x04400000)
        return .bitc;
    if ((raw & 0x0FE00000) == 0x04600000)
        return .bitnc;
    if ((raw & 0x0FE00000) == 0x04800000)
        return .bitz;
    if ((raw & 0x0FE00000) == 0x04A00000)
        return .bitnz;
    if ((raw & 0x0FE00000) == 0x04C00000)
        return .bitrnd;
    if ((raw & 0x0FE00000) == 0x04E00000)
        return .bitnot;
    if ((raw & 0x0FE00000) == 0x05000000)
        return .@"and";
    if ((raw & 0x0FE00000) == 0x05200000)
        return .andn;
    if ((raw & 0x0FE00000) == 0x05400000)
        return .@"or";
    if ((raw & 0x0FE00000) == 0x05600000)
        return .xor;
    if ((raw & 0x0FE00000) == 0x05800000)
        return .muxc;
    if ((raw & 0x0FE00000) == 0x05A00000)
        return .muxnc;
    if ((raw & 0x0FE00000) == 0x05C00000)
        return .muxz;
    if ((raw & 0x0FE00000) == 0x05E00000)
        return .muxnz;
    if ((raw & 0x0FE00000) == 0x06000000)
        return .mov;
    if ((raw & 0x0FE00000) == 0x06200000)
        return .not;
    if ((raw & 0x0FE00000) == 0x06400000)
        return .abs;
    if ((raw & 0x0FE00000) == 0x06600000)
        return .neg;
    if ((raw & 0x0FE00000) == 0x06800000)
        return .negc;
    if ((raw & 0x0FE00000) == 0x06A00000)
        return .negnc;
    if ((raw & 0x0FE00000) == 0x06C00000)
        return .negz;
    if ((raw & 0x0FE00000) == 0x06E00000)
        return .negnz;
    if ((raw & 0x0FE00000) == 0x07000000)
        return .incmod;
    if ((raw & 0x0FE00000) == 0x07200000)
        return .decmod;
    if ((raw & 0x0FE00000) == 0x07400000)
        return .zerox;
    if ((raw & 0x0FE00000) == 0x07600000)
        return .signx;
    if ((raw & 0x0FE00000) == 0x07800000)
        return .encod;
    if ((raw & 0x0FE00000) == 0x07A00000)
        return .ones;
    if ((raw & 0x0FE00000) == 0x07C00000)
        return .@"test";
    if ((raw & 0x0FE00000) == 0x07E00000)
        return .testn;
    if ((raw & 0x0FE00000) == 0x08C00000)
        return .setbyte;
    if ((raw & 0x0FE00000) == 0x08E00000)
        return .getbyte;
    if ((raw & 0x0FE00000) == 0x09000000)
        return .rolbyte;
    if ((raw & 0x0FE00000) == 0x0AA00000)
        return .rdlut;
    if ((raw & 0x0FE00000) == 0x0AC00000)
        return .rdbyte;
    if ((raw & 0x0FE00000) == 0x0AE00000)
        return .rdword;
    if ((raw & 0x0FE00000) == 0x0B000000)
        return .rdlong;
    if ((raw & 0x0FE00000) == 0x0B200000)
        return .calld_s;
    if ((raw & 0x0FE00000) == 0x0CE00000)
        return .coginit;
    if ((raw & 0x0FE00000) == 0x0D800000)
        return .jmp_a;
    if ((raw & 0x0FE00000) == 0x0DA00000)
        return .call_a;
    if ((raw & 0x0FE00000) == 0x0DC00000)
        return .calla_a;
    if ((raw & 0x0FE00000) == 0x0DE00000)
        return .callb_a;
    if ((raw & 0x0FF00000) == 0x09200000)
        return .setword;
    if ((raw & 0x0FF00000) == 0x09300000)
        return .getword;
    if ((raw & 0x0FF00000) == 0x09400000)
        return .rolword;
    if ((raw & 0x0FF00000) == 0x0A000000)
        return .mul;
    if ((raw & 0x0FF00000) == 0x0A100000)
        return .muls;
    if ((raw & 0x0FF00000) == 0x0A200000)
        return .sca;
    if ((raw & 0x0FF00000) == 0x0A300000)
        return .scas;
    if ((raw & 0x0FE80000) == 0x0A800000)
        return .rqpin;
    if ((raw & 0x0FE80000) == 0x0A880000)
        return .rdpin;
    if ((raw & 0x0FF00000) == 0x0B400000)
        return .callpa;
    if ((raw & 0x0FF00000) == 0x0B500000)
        return .callpb;
    if ((raw & 0x0FF00000) == 0x0BF00000)
        return .setpat;
    if ((raw & 0x0FF00000) == 0x0C000000)
        return .wrpin;
    if ((raw & 0x0FF00000) == 0x0C100000)
        return .wxpin;
    if ((raw & 0x0FF00000) == 0x0C200000)
        return .wypin;
    if ((raw & 0x0FF00000) == 0x0C300000)
        return .wrlut;
    if ((raw & 0x0FF00000) == 0x0C400000)
        return .wrbyte;
    if ((raw & 0x0FF00000) == 0x0C500000)
        return .wrword;
    if ((raw & 0x0FF00000) == 0x0C600000)
        return .wrlong;
    if ((raw & 0x0FF00000) == 0x0C700000)
        return .rdfast;
    if ((raw & 0x0FF00000) == 0x0C800000)
        return .wrfast;
    if ((raw & 0x0FF00000) == 0x0C900000)
        return .fblock;
    if ((raw & 0x0FF00000) == 0x0CA00000)
        return .xinit;
    if ((raw & 0x0FF00000) == 0x0CB00000)
        return .xzero;
    if ((raw & 0x0FF00000) == 0x0CC00000)
        return .xcont;
    if ((raw & 0x0FF00000) == 0x0CD00000)
        return .rep;
    if ((raw & 0x0FF00000) == 0x0D000000)
        return .qmul;
    if ((raw & 0x0FF00000) == 0x0D100000)
        return .qdiv;
    if ((raw & 0x0FF00000) == 0x0D200000)
        return .qfrac;
    if ((raw & 0x0FF00000) == 0x0D300000)
        return .qsqrt;
    if ((raw & 0x0FF00000) == 0x0D400000)
        return .qrotate;
    if ((raw & 0x0FF00000) == 0x0D500000)
        return .qvector;
    if ((raw & 0x0FF80000) == 0x09500000)
        return .altsn;
    if ((raw & 0x0FF80000) == 0x09580000)
        return .altgn;
    if ((raw & 0x0FF80000) == 0x09600000)
        return .altsb;
    if ((raw & 0x0FF80000) == 0x09680000)
        return .altgb;
    if ((raw & 0x0FF80000) == 0x09700000)
        return .altsw;
    if ((raw & 0x0FF80000) == 0x09780000)
        return .altgw;
    if ((raw & 0x0FF80000) == 0x09800000)
        return .altr;
    if ((raw & 0x0FF80000) == 0x09880000)
        return .altd;
    if ((raw & 0x0FF80000) == 0x09900000)
        return .alts;
    if ((raw & 0x0FF80000) == 0x09980000)
        return .altb;
    if ((raw & 0x0FF80000) == 0x09A00000)
        return .alti;
    if ((raw & 0x0FF80000) == 0x09A80000)
        return .setr;
    if ((raw & 0x0FF80000) == 0x09B00000)
        return .setd;
    if ((raw & 0x0FF80000) == 0x09B80000)
        return .sets;
    if ((raw & 0x0FF80000) == 0x09C00000)
        return .decod;
    if ((raw & 0x0FF80000) == 0x09C80000)
        return .bmask;
    if ((raw & 0x0FF80000) == 0x09D00000)
        return .crcbit;
    if ((raw & 0x0FF80000) == 0x09D80000)
        return .crcnib;
    if ((raw & 0x0FF80000) == 0x09E00000)
        return .muxnits;
    if ((raw & 0x0FF80000) == 0x09E80000)
        return .muxnibs;
    if ((raw & 0x0FF80000) == 0x09F00000)
        return .muxq;
    if ((raw & 0x0FF80000) == 0x09F80000)
        return .movbyts;
    if ((raw & 0x0FF80000) == 0x0A400000)
        return .addpix;
    if ((raw & 0x0FF80000) == 0x0A480000)
        return .mulpix;
    if ((raw & 0x0FF80000) == 0x0A500000)
        return .blnpix;
    if ((raw & 0x0FF80000) == 0x0A580000)
        return .mixpix;
    if ((raw & 0x0FF80000) == 0x0A600000)
        return .addct1;
    if ((raw & 0x0FF80000) == 0x0A680000)
        return .addct2;
    if ((raw & 0x0FF80000) == 0x0A700000)
        return .addct3;
    if ((raw & 0x0FF80000) == 0x0A780000)
        return .wmlong;
    if ((raw & 0x0FF80000) == 0x0B600000)
        return .djz;
    if ((raw & 0x0FF80000) == 0x0B680000)
        return .djnz;
    if ((raw & 0x0FF80000) == 0x0B700000)
        return .djf;
    if ((raw & 0x0FF80000) == 0x0B780000)
        return .djnf;
    if ((raw & 0x0FF80000) == 0x0B800000)
        return .ijz;
    if ((raw & 0x0FF80000) == 0x0B880000)
        return .ijnz;
    if ((raw & 0x0FF80000) == 0x0B900000)
        return .tjz;
    if ((raw & 0x0FF80000) == 0x0B980000)
        return .tjnz;
    if ((raw & 0x0FF80000) == 0x0BA00000)
        return .tjf;
    if ((raw & 0x0FF80000) == 0x0BA80000)
        return .tjnf;
    if ((raw & 0x0FF80000) == 0x0BB00000)
        return .tjs;
    if ((raw & 0x0FF80000) == 0x0BB80000)
        return .tjns;
    if ((raw & 0x0FF80000) == 0x0BC00000)
        return .tjv;
    if ((raw & 0x0FE001FF) == 0x0D60001F)
        return .waitx;
    if ((raw & 0x0FE001FF) == 0x0D600040)
        return .testp;
    if ((raw & 0x0FE001FF) == 0x0D600041)
        return .testpn;
    if ((raw & 0x0FE001FF) == 0x0D600042)
        return .testp_and;
    if ((raw & 0x0FE001FF) == 0x0D600043)
        return .testpn_and;
    if ((raw & 0x0FE001FF) == 0x0D600044)
        return .testp_or;
    if ((raw & 0x0FE001FF) == 0x0D600045)
        return .testpn_or;
    if ((raw & 0x0FE001FF) == 0x0D600046)
        return .testp_xor;
    if ((raw & 0x0FE001FF) == 0x0D600047)
        return .testpn_xor;
    if ((raw & 0x0FE001FF) == 0x0D600040)
        return .dirl;
    if ((raw & 0x0FE001FF) == 0x0D600041)
        return .dirh;
    if ((raw & 0x0FE001FF) == 0x0D600042)
        return .dirc;
    if ((raw & 0x0FE001FF) == 0x0D600043)
        return .dirnc;
    if ((raw & 0x0FE001FF) == 0x0D600044)
        return .dirz;
    if ((raw & 0x0FE001FF) == 0x0D600045)
        return .dirnz;
    if ((raw & 0x0FE001FF) == 0x0D600046)
        return .dirrnd;
    if ((raw & 0x0FE001FF) == 0x0D600047)
        return .dirnot;
    if ((raw & 0x0FE001FF) == 0x0D600048)
        return .outl;
    if ((raw & 0x0FE001FF) == 0x0D600049)
        return .outh;
    if ((raw & 0x0FE001FF) == 0x0D60004A)
        return .outc;
    if ((raw & 0x0FE001FF) == 0x0D60004B)
        return .outnc;
    if ((raw & 0x0FE001FF) == 0x0D60004C)
        return .outz;
    if ((raw & 0x0FE001FF) == 0x0D60004D)
        return .outnz;
    if ((raw & 0x0FE001FF) == 0x0D60004E)
        return .outrnd;
    if ((raw & 0x0FE001FF) == 0x0D60004F)
        return .outnot;
    if ((raw & 0x0FE001FF) == 0x0D600050)
        return .fltl;
    if ((raw & 0x0FE001FF) == 0x0D600051)
        return .flth;
    if ((raw & 0x0FE001FF) == 0x0D600052)
        return .fltc;
    if ((raw & 0x0FE001FF) == 0x0D600053)
        return .fltnc;
    if ((raw & 0x0FE001FF) == 0x0D600054)
        return .fltz;
    if ((raw & 0x0FE001FF) == 0x0D600055)
        return .fltnz;
    if ((raw & 0x0FE001FF) == 0x0D600056)
        return .fltrnd;
    if ((raw & 0x0FE001FF) == 0x0D600057)
        return .fltnot;
    if ((raw & 0x0FE001FF) == 0x0D600058)
        return .drvl;
    if ((raw & 0x0FE001FF) == 0x0D600059)
        return .drvh;
    if ((raw & 0x0FE001FF) == 0x0D60005A)
        return .drvc;
    if ((raw & 0x0FE001FF) == 0x0D60005B)
        return .drvnc;
    if ((raw & 0x0FE001FF) == 0x0D60005C)
        return .drvz;
    if ((raw & 0x0FE001FF) == 0x0D60005D)
        return .drvnz;
    if ((raw & 0x0FE001FF) == 0x0D60005E)
        return .drvrnd;
    if ((raw & 0x0FE001FF) == 0x0D60005F)
        return .drvnot;
    if ((raw & 0x0FE801FF) == 0x0D600001)
        return .cogid;
    if ((raw & 0x0FE801FF) == 0x0D600006)
        return .locktry;
    if ((raw & 0x0FE801FF) == 0x0D600007)
        return .lockrel;
    if ((raw & 0x0FE401FF) == 0x0D600010)
        return .rfbyte;
    if ((raw & 0x0FE401FF) == 0x0D600011)
        return .rfword;
    if ((raw & 0x0FE401FF) == 0x0D600012)
        return .rflong;
    if ((raw & 0x0FE401FF) == 0x0D600013)
        return .rfvar;
    if ((raw & 0x0FE401FF) == 0x0D600014)
        return .rfvars;
    if ((raw & 0x0FE401FF) == 0x0D600018)
        return .getqx;
    if ((raw & 0x0FE401FF) == 0x0D600019)
        return .getqy;
    if ((raw & 0x0FE401FF) == 0x0D60001B)
        return .getrnd;
    if ((raw & 0x0FE401FF) == 0x0D60002B)
        return .pop;
    if ((raw & 0x0FE401FF) == 0x0D60002C)
        return .jmp_d;
    if ((raw & 0x0FE401FF) == 0x0D60002D)
        return .call_d;
    if ((raw & 0x0FE401FF) == 0x0D60002E)
        return .calla_d;
    if ((raw & 0x0FE401FF) == 0x0D60002F)
        return .callb_d;
    if ((raw & 0x0FE401FF) == 0x0D600035)
        return .getbrk;
    if ((raw & 0x0FE401FF) == 0x0D60006A)
        return .rczr;
    if ((raw & 0x0FE401FF) == 0x0D60006B)
        return .rczl;
    if ((raw & 0x0FFBFE00) == 0x0BC80000)
        return .jint;
    if ((raw & 0x0FFBFE00) == 0x0BC80200)
        return .jct1;
    if ((raw & 0x0FFBFE00) == 0x0BC80400)
        return .jct2;
    if ((raw & 0x0FFBFE00) == 0x0BC80600)
        return .jct3;
    if ((raw & 0x0FFBFE00) == 0x0BC80800)
        return .jse1;
    if ((raw & 0x0FFBFE00) == 0x0BC80A00)
        return .jse2;
    if ((raw & 0x0FFBFE00) == 0x0BC80C00)
        return .jse3;
    if ((raw & 0x0FFBFE00) == 0x0BC80E00)
        return .jse4;
    if ((raw & 0x0FFBFE00) == 0x0BC81000)
        return .jpat;
    if ((raw & 0x0FFBFE00) == 0x0BC81200)
        return .jfbw;
    if ((raw & 0x0FFBFE00) == 0x0BC81400)
        return .jxmt;
    if ((raw & 0x0FFBFE00) == 0x0BC81600)
        return .jxfi;
    if ((raw & 0x0FFBFE00) == 0x0BC81800)
        return .jxro;
    if ((raw & 0x0FFBFE00) == 0x0BC81A00)
        return .jxrl;
    if ((raw & 0x0FFBFE00) == 0x0BC81C00)
        return .jatn;
    if ((raw & 0x0FFBFE00) == 0x0BC81E00)
        return .jqmt;
    if ((raw & 0x0FFBFE00) == 0x0BC82000)
        return .jnint;
    if ((raw & 0x0FFBFE00) == 0x0BC82200)
        return .jnct1;
    if ((raw & 0x0FFBFE00) == 0x0BC82400)
        return .jnct2;
    if ((raw & 0x0FFBFE00) == 0x0BC82600)
        return .jnct3;
    if ((raw & 0x0FFBFE00) == 0x0BC82800)
        return .jnse1;
    if ((raw & 0x0FFBFE00) == 0x0BC82A00)
        return .jnse2;
    if ((raw & 0x0FFBFE00) == 0x0BC82C00)
        return .jnse3;
    if ((raw & 0x0FFBFE00) == 0x0BC82E00)
        return .jnse4;
    if ((raw & 0x0FFBFE00) == 0x0BC83000)
        return .jnpat;
    if ((raw & 0x0FFBFE00) == 0x0BC83200)
        return .jnfbw;
    if ((raw & 0x0FFBFE00) == 0x0BC83400)
        return .jnxmt;
    if ((raw & 0x0FFBFE00) == 0x0BC83600)
        return .jnxfi;
    if ((raw & 0x0FFBFE00) == 0x0BC83800)
        return .jnxro;
    if ((raw & 0x0FFBFE00) == 0x0BC83A00)
        return .jnxrl;
    if ((raw & 0x0FFBFE00) == 0x0BC83C00)
        return .jnatn;
    if ((raw & 0x0FFBFE00) == 0x0BC83E00)
        return .jnqmt;
    if ((raw & 0x0FF801FF) == 0x0D600000)
        return .hubset;
    if ((raw & 0x0FF801FF) == 0x0D600003)
        return .cogstop;
    if ((raw & 0x0FEC01FF) == 0x0D600004)
        return .locknew;
    if ((raw & 0x0FF801FF) == 0x0D600005)
        return .lockret;
    if ((raw & 0x0FF801FF) == 0x0D60000E)
        return .qlog;
    if ((raw & 0x0FF801FF) == 0x0D60000F)
        return .qexp;
    if ((raw & 0x0FF801FF) == 0x0D600015)
        return .wfbyte;
    if ((raw & 0x0FF801FF) == 0x0D600016)
        return .wfword;
    if ((raw & 0x0FF801FF) == 0x0D600017)
        return .wflong;
    if ((raw & 0x0FEC01FF) == 0x0D60001A)
        return .getct;
    if ((raw & 0x0FF801FF) == 0x0D60001C)
        return .setdacs;
    if ((raw & 0x0FF801FF) == 0x0D60001D)
        return .setxfrq;
    if ((raw & 0x0FF801FF) == 0x0D600020)
        return .setse1;
    if ((raw & 0x0FF801FF) == 0x0D600021)
        return .setse2;
    if ((raw & 0x0FF801FF) == 0x0D600022)
        return .setse3;
    if ((raw & 0x0FF801FF) == 0x0D600023)
        return .setse4;
    if ((raw & 0x0FF801FF) == 0x0D600025)
        return .setint1;
    if ((raw & 0x0FF801FF) == 0x0D600026)
        return .setint2;
    if ((raw & 0x0FF801FF) == 0x0D600027)
        return .setint3;
    if ((raw & 0x0FF801FF) == 0x0D600028)
        return .setq;
    if ((raw & 0x0FF801FF) == 0x0D600029)
        return .setq2;
    if ((raw & 0x0FF801FF) == 0x0D60002A)
        return .push;
    if ((raw & 0x0FF801FF) == 0x0D600030)
        return .jmprel;
    if ((raw & 0x0FF801FF) == 0x0D600031)
        return .skip;
    if ((raw & 0x0FF801FF) == 0x0D600032)
        return .skipf;
    if ((raw & 0x0FF801FF) == 0x0D600033)
        return .execf;
    if ((raw & 0x0FF801FF) == 0x0D600035)
        return .cogbrk;
    if ((raw & 0x0FF801FF) == 0x0D600036)
        return .brk;
    if ((raw & 0x0FF801FF) == 0x0D600037)
        return .setluts;
    if ((raw & 0x0FF801FF) == 0x0D600038)
        return .setcy;
    if ((raw & 0x0FF801FF) == 0x0D600039)
        return .setci;
    if ((raw & 0x0FF801FF) == 0x0D60003A)
        return .setcq;
    if ((raw & 0x0FF801FF) == 0x0D60003B)
        return .setcfrq;
    if ((raw & 0x0FF801FF) == 0x0D60003C)
        return .setcmod;
    if ((raw & 0x0FF801FF) == 0x0D60003D)
        return .setpiv;
    if ((raw & 0x0FF801FF) == 0x0D60003E)
        return .setpix;
    if ((raw & 0x0FF801FF) == 0x0D60003F)
        return .cogatn;
    if ((raw & 0x0FE601FF) == 0x0D64006F)
        return .modcz;
    if ((raw & 0x0FF801FF) == 0x0D600070)
        return .setscp;
    if ((raw & 0x0FFC01FF) == 0x0D60001E)
        return .getxacc;
    if ((raw & 0x0FFC01FF) == 0x0D600034)
        return .getptr;
    if ((raw & 0x0FFC01FF) == 0x0D600060)
        return .splitb;
    if ((raw & 0x0FFC01FF) == 0x0D600061)
        return .mergeb;
    if ((raw & 0x0FFC01FF) == 0x0D600062)
        return .splitw;
    if ((raw & 0x0FFC01FF) == 0x0D600063)
        return .mergew;
    if ((raw & 0x0FFC01FF) == 0x0D600064)
        return .seussf;
    if ((raw & 0x0FFC01FF) == 0x0D600065)
        return .seussr;
    if ((raw & 0x0FFC01FF) == 0x0D600066)
        return .rgbsqz;
    if ((raw & 0x0FFC01FF) == 0x0D600067)
        return .rgbexp;
    if ((raw & 0x0FFC01FF) == 0x0D600068)
        return .xoro32;
    if ((raw & 0x0FFC01FF) == 0x0D600069)
        return .rev;
    if ((raw & 0x0FFC01FF) == 0x0D60006C)
        return .wrc;
    if ((raw & 0x0FFC01FF) == 0x0D60006D)
        return .wrnc;
    if ((raw & 0x0FFC01FF) == 0x0D60006E)
        return .wrz;
    if ((raw & 0x0FFC01FF) == 0x0D60006F)
        return .wrnz;
    if ((raw & 0x0FFC01FF) == 0x0D600071)
        return .getscp;
    if ((raw & 0x0FE7FFFF) == 0x0D600024)
        return .pollint;
    if ((raw & 0x0FE7FFFF) == 0x0D600224)
        return .pollct1;
    if ((raw & 0x0FE7FFFF) == 0x0D600424)
        return .pollct2;
    if ((raw & 0x0FE7FFFF) == 0x0D600624)
        return .pollct3;
    if ((raw & 0x0FE7FFFF) == 0x0D600824)
        return .pollse1;
    if ((raw & 0x0FE7FFFF) == 0x0D600A24)
        return .pollse2;
    if ((raw & 0x0FE7FFFF) == 0x0D600C24)
        return .pollse3;
    if ((raw & 0x0FE7FFFF) == 0x0D600E24)
        return .pollse4;
    if ((raw & 0x0FE7FFFF) == 0x0D601024)
        return .pollpat;
    if ((raw & 0x0FE7FFFF) == 0x0D601224)
        return .pollfbw;
    if ((raw & 0x0FE7FFFF) == 0x0D601424)
        return .pollxmt;
    if ((raw & 0x0FE7FFFF) == 0x0D601624)
        return .pollxfi;
    if ((raw & 0x0FE7FFFF) == 0x0D601824)
        return .pollxro;
    if ((raw & 0x0FE7FFFF) == 0x0D601A24)
        return .pollxrl;
    if ((raw & 0x0FE7FFFF) == 0x0D601C24)
        return .pollatn;
    if ((raw & 0x0FE7FFFF) == 0x0D601E24)
        return .pollqmt;
    if ((raw & 0x0FE7FFFF) == 0x0D602024)
        return .waitint;
    if ((raw & 0x0FE7FFFF) == 0x0D602224)
        return .waitct1;
    if ((raw & 0x0FE7FFFF) == 0x0D602424)
        return .waitct2;
    if ((raw & 0x0FE7FFFF) == 0x0D602624)
        return .waitct3;
    if ((raw & 0x0FE7FFFF) == 0x0D602824)
        return .waitse1;
    if ((raw & 0x0FE7FFFF) == 0x0D602A24)
        return .waitse2;
    if ((raw & 0x0FE7FFFF) == 0x0D602C24)
        return .waitse3;
    if ((raw & 0x0FE7FFFF) == 0x0D602E24)
        return .waitse4;
    if ((raw & 0x0FE7FFFF) == 0x0D603024)
        return .waitpat;
    if ((raw & 0x0FE7FFFF) == 0x0D603224)
        return .waitfbw;
    if ((raw & 0x0FE7FFFF) == 0x0D603424)
        return .waitxmt;
    if ((raw & 0x0FE7FFFF) == 0x0D603624)
        return .waitxfi;
    if ((raw & 0x0FE7FFFF) == 0x0D603824)
        return .waitxro;
    if ((raw & 0x0FE7FFFF) == 0x0D603A24)
        return .waitxrl;
    if ((raw & 0x0FE7FFFF) == 0x0D603C24)
        return .waitatn;
    if ((raw & 0x0FE7FFFF) == 0x0D64002D)
        return .ret;
    if ((raw & 0x0FE7FFFF) == 0x0D64002E)
        return .reta;
    if ((raw & 0x0FE7FFFF) == 0x0D64002F)
        return .retb;
    if ((raw & 0x0FFFFFFF) == 0x0D604024)
        return .allowi;
    if ((raw & 0x0FFFFFFF) == 0x0D604224)
        return .stalli;
    if ((raw & 0x0FFFFFFF) == 0x0D604424)
        return .trgint1;
    if ((raw & 0x0FFFFFFF) == 0x0D604624)
        return .trgint2;
    if ((raw & 0x0FFFFFFF) == 0x0D604824)
        return .trgint3;
    if ((raw & 0x0FFFFFFF) == 0x0D604A24)
        return .nixint1;
    if ((raw & 0x0FFFFFFF) == 0x0D604C24)
        return .nixint2;
    if ((raw & 0x0FFFFFFF) == 0x0D604E24)
        return .nixint3;
    return .invalid;
}
