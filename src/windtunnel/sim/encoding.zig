//!
//! AUTOGENERATED CODE!
//! This code was autogenerated by utility/gen_windtunnel.py encoding!
//!
const std = @import("std");

const enums = @import("enums.zig");

pub const Register = enums.Register;
pub const Condition = enums.Condition;
pub const FlagModifier = enums.FlagModifier;
pub const FlagExpression = enums.FlagExpression;
pub const PointerReg = enums.PointerReg;

comptime {
    std.debug.assert(@bitSizeOf(Instruction) == 32);
}

pub const Instruction = packed union {
    raw: u32,
    loc_style: LocStyle,
    both_d_simm_n3: Both_D_Simm_N3,
    both_dimm_simm_cflag: Both_Dimm_Simm_CFlag,
    both_d_simm_flags: Both_D_Simm_Flags,
    only_dimm_flags: Only_Dimm_Flags,
    only_d_flags: Only_D_Flags,
    only_flags: OnlyFlags,
    update_flags: UpdateFlags,
    both_d_simm_cflag: Both_D_Simm_CFlag,
    only_dimm_cflag: Only_Dimm_CFlag,
    only_d_cflag: Only_D_CFlag,
    both_d_simm_n2: Both_D_Simm_N2,
    abs_pointer: AbsPointer,
    both_dimm_simm: Both_Dimm_Simm,
    only_dimm_high: Only_DimmHigh,
    both_d_simm_n1: Both_D_Simm_N1,
    both_d_simm_zflag: Both_D_Simm_ZFlag,
    both_d_simm: Both_D_Simm,
    only_simm: Only_Simm,
    only_dimm: Only_Dimm,
    only_d: Only_D,
    no_operands: NoOperands,
    augment: Augment,
    nop: Nop,
};

/// 'EEEE_____WWRAAAAAAAAAAAAAAAAAAAA'
pub const LocStyle = packed struct(u32) {
    address: u20,
    relative: bool,
    pointer: PointerReg,
    _mask1: u5,
    cond: Condition,
};

/// 'EEEE______NNNIDDDDDDDDDSSSSSSSSS'
pub const Both_D_Simm_N3 = packed struct(u32) {
    s: Register,
    d: Register,
    s_imm: bool,
    n: u3,
    _mask1: u6,
    cond: Condition,
};

/// 'EEEE_______CLIDDDDDDDDDSSSSSSSSS'
pub const Both_Dimm_Simm_CFlag = packed struct(u32) {
    s: Register,
    d: Register,
    s_imm: bool,
    d_imm: bool,
    c_mod: FlagModifier,
    _mask1: u7,
    cond: Condition,
};

/// 'EEEE_______CZIDDDDDDDDDSSSSSSSSS'
pub const Both_D_Simm_Flags = packed struct(u32) {
    s: Register,
    d: Register,
    s_imm: bool,
    z_mod: FlagModifier,
    c_mod: FlagModifier,
    _mask1: u7,
    cond: Condition,
};

/// 'EEEE_______CZLDDDDDDDDD_________'
pub const Only_Dimm_Flags = packed struct(u32) {
    _mask1: u9,
    d: Register,
    d_imm: bool,
    z_mod: FlagModifier,
    c_mod: FlagModifier,
    _mask2: u7,
    cond: Condition,
};

/// 'EEEE_______CZ_DDDDDDDDD_________'
pub const Only_D_Flags = packed struct(u32) {
    _mask1: u9,
    d: Register,
    _mask2: u1,
    z_mod: FlagModifier,
    c_mod: FlagModifier,
    _mask3: u7,
    cond: Condition,
};

/// 'EEEE_______CZ___________________'
pub const OnlyFlags = packed struct(u32) {
    _mask1: u19,
    z_mod: FlagModifier,
    c_mod: FlagModifier,
    _mask2: u7,
    cond: Condition,
};

/// 'EEEE_______CZ__cccczzzz_________'
pub const UpdateFlags = packed struct(u32) {
    _mask1: u9,
    z_value: FlagExpression,
    c_value: FlagExpression,
    _mask2: u2,
    z_mod: FlagModifier,
    c_mod: FlagModifier,
    _mask3: u7,
    cond: Condition,
};

/// 'EEEE_______C_IDDDDDDDDDSSSSSSSSS'
pub const Both_D_Simm_CFlag = packed struct(u32) {
    s: Register,
    d: Register,
    s_imm: bool,
    _mask1: u1,
    c_mod: FlagModifier,
    _mask2: u7,
    cond: Condition,
};

/// 'EEEE_______C_LDDDDDDDDD_________'
pub const Only_Dimm_CFlag = packed struct(u32) {
    _mask1: u9,
    d: Register,
    d_imm: bool,
    _mask2: u1,
    c_mod: FlagModifier,
    _mask3: u7,
    cond: Condition,
};

/// 'EEEE_______C__DDDDDDDDD_________'
pub const Only_D_CFlag = packed struct(u32) {
    _mask1: u9,
    d: Register,
    _mask2: u2,
    c_mod: FlagModifier,
    _mask3: u7,
    cond: Condition,
};

/// 'EEEE_______NNIDDDDDDDDDSSSSSSSSS'
pub const Both_D_Simm_N2 = packed struct(u32) {
    s: Register,
    d: Register,
    s_imm: bool,
    n: u2,
    _mask1: u7,
    cond: Condition,
};

/// 'EEEE_______RAAAAAAAAAAAAAAAAAAAA'
pub const AbsPointer = packed struct(u32) {
    address: u20,
    relative: bool,
    _mask1: u7,
    cond: Condition,
};

/// 'EEEE________LIDDDDDDDDDSSSSSSSSS'
pub const Both_Dimm_Simm = packed struct(u32) {
    s: Register,
    d: Register,
    s_imm: bool,
    d_imm: bool,
    _mask1: u8,
    cond: Condition,
};

/// 'EEEE________L_DDDDDDDDD_________'
pub const Only_DimmHigh = packed struct(u32) {
    _mask1: u9,
    d: Register,
    _mask2: u1,
    d_imm: bool,
    _mask3: u8,
    cond: Condition,
};

/// 'EEEE________NIDDDDDDDDDSSSSSSSSS'
pub const Both_D_Simm_N1 = packed struct(u32) {
    s: Register,
    d: Register,
    s_imm: bool,
    n: u1,
    _mask1: u8,
    cond: Condition,
};

/// 'EEEE________ZIDDDDDDDDDSSSSSSSSS'
pub const Both_D_Simm_ZFlag = packed struct(u32) {
    s: Register,
    d: Register,
    s_imm: bool,
    z_mod: FlagModifier,
    _mask1: u8,
    cond: Condition,
};

/// 'EEEE_________IDDDDDDDDDSSSSSSSSS'
pub const Both_D_Simm = packed struct(u32) {
    s: Register,
    d: Register,
    s_imm: bool,
    _mask1: u9,
    cond: Condition,
};

/// 'EEEE_________I_________SSSSSSSSS'
pub const Only_Simm = packed struct(u32) {
    s: Register,
    _mask1: u9,
    s_imm: bool,
    _mask2: u9,
    cond: Condition,
};

/// 'EEEE_________LDDDDDDDDD_________'
pub const Only_Dimm = packed struct(u32) {
    _mask1: u9,
    d: Register,
    d_imm: bool,
    _mask2: u9,
    cond: Condition,
};

/// 'EEEE__________DDDDDDDDD_________'
pub const Only_D = packed struct(u32) {
    _mask1: u9,
    d: Register,
    _mask2: u10,
    cond: Condition,
};

/// 'EEEE____________________________'
pub const NoOperands = packed struct(u32) {
    _mask1: u28,
    cond: Condition,
};

/// 'EEEE_____nnnnnnnnnnnnnnnnnnnnnnn'
pub const Augment = packed struct(u32) {
    augment: u23,
    _mask1: u5,
    cond: Condition,
};

/// '________________________________'
pub const Nop = packed struct(u32) {
    _mask1: u32,
};
