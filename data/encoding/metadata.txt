
# these instructions change subsequent instructions:
ALTSN:      +change_next
ALTGN:      +change_next
ALTSB:      +change_next
ALTGB:      +change_next
ALTSW:      +change_next
ALTGW:      +change_next
ALTR:       +change_next
ALTD:       +change_next
ALTS:       +change_next
ALTB:       +change_next
ALTI:       +change_next
SCA:        +change_next
SCAS:       +change_next
GETXACC:    +change_next
XORO32:     +change_next

# these instructions are "simple", as in they don't have any funky behaviour:
# this tag means that we always have a 2-cycle execution, we always have normal
# behaviour for D, S fetching and result writing.
# The condition is also handled normally.
ROR:        +simple_exec
ROL:        +simple_exec
SHR:        +simple_exec
SHL:        +simple_exec
RCR:        +simple_exec
RCL:        +simple_exec
SAR:        +simple_exec
SAL:        +simple_exec
ADD:        +simple_exec
ADDX:       +simple_exec
ADDS:       +simple_exec
ADDSX:      +simple_exec
SUB:        +simple_exec
SUBX:       +simple_exec
SUBS:       +simple_exec
SUBSX:      +simple_exec
CMP:        +simple_exec
CMPX:       +simple_exec
CMPS:       +simple_exec
CMPSX:      +simple_exec
CMPR:       +simple_exec
CMPM:       +simple_exec
SUBR:       +simple_exec
CMPSUB:     +simple_exec
FGE:        +simple_exec
FLE:        +simple_exec
FGES:       +simple_exec
FLES:       +simple_exec
SUMC:       +simple_exec
SUMNC:      +simple_exec
SUMZ:       +simple_exec
SUMNZ:      +simple_exec
TESTB:      +simple_exec
TESTBN:     +simple_exec
TESTB:      +simple_exec
TESTBN:     +simple_exec
TESTB:      +simple_exec
TESTBN:     +simple_exec
TESTB:      +simple_exec
TESTBN:     +simple_exec
BITL:       +simple_exec
BITH:       +simple_exec
BITC:       +simple_exec
BITNC:      +simple_exec
BITZ:       +simple_exec
BITNZ:      +simple_exec
BITRND:     +simple_exec
BITNOT:     +simple_exec
AND:        +simple_exec
ANDN:       +simple_exec
OR:         +simple_exec
XOR:        +simple_exec
MUXC:       +simple_exec
MUXNC:      +simple_exec
MUXZ:       +simple_exec
MUXNZ:      +simple_exec
MOV:        +simple_exec
NOT:        +simple_exec
ABS:        +simple_exec
NEG:        +simple_exec
NEGC:       +simple_exec
NEGNC:      +simple_exec
NEGZ:       +simple_exec
NEGNZ:      +simple_exec
INCMOD:     +simple_exec
DECMOD:     +simple_exec
ZEROX:      +simple_exec
SIGNX:      +simple_exec
ENCOD:      +simple_exec
ONES:       +simple_exec
TEST:       +simple_exec
TESTN:      +simple_exec
SETR:       +simple_exec
SETD:       +simple_exec
SETS:       +simple_exec
DECOD:      +simple_exec
BMASK:      +simple_exec
MUXNITS:    +simple_exec
MUXNIBS:    +simple_exec
MOVBYTS:    +simple_exec
MUL:        +simple_exec
MULS:       +simple_exec
SPLITB:     +simple_exec
MERGEB:     +simple_exec
SPLITW:     +simple_exec
MERGEW:     +simple_exec
SEUSSF:     +simple_exec
SEUSSR:     +simple_exec
RGBSQZ:     +simple_exec
RGBEXP:     +simple_exec
REV:        +simple_exec
RCZR:       +simple_exec
RCZL:       +simple_exec
WRC:        +simple_exec
WRNC:       +simple_exec
WRZ:        +simple_exec
WRNZ:       +simple_exec

# these instructions yield z=(result == 0)
ROR:        +z_is_reszero
ROL:        +z_is_reszero
SHR:        +z_is_reszero
SHL:        +z_is_reszero
RCR:        +z_is_reszero
RCL:        +z_is_reszero
SAR:        +z_is_reszero
SAL:        +z_is_reszero
ADD:        +z_is_reszero
ADDS:       +z_is_reszero
SUB:        +z_is_reszero
SUBS:       +z_is_reszero
SUBR:       +z_is_reszero
CMPSUB:     +z_is_reszero
FGE:        +z_is_reszero
FLE:        +z_is_reszero
FGES:       +z_is_reszero
FLES:       +z_is_reszero
SUMC:       +z_is_reszero
SUMNC:      +z_is_reszero
SUMZ:       +z_is_reszero
SUMNZ:      +z_is_reszero
AND:        +z_is_reszero
ANDN:       +z_is_reszero
OR:         +z_is_reszero
XOR:        +z_is_reszero
MUXC:       +z_is_reszero
MUXNC:      +z_is_reszero
MUXZ:       +z_is_reszero
MUXNZ:      +z_is_reszero
MOV:        +z_is_reszero
NOT:        +z_is_reszero
ABS:        +z_is_reszero
NEG:        +z_is_reszero
NEGC:       +z_is_reszero
NEGNC:      +z_is_reszero
NEGZ:       +z_is_reszero
NEGNZ:      +z_is_reszero
INCMOD:     +z_is_reszero
DECMOD:     +z_is_reszero
ZEROX:      +z_is_reszero
SIGNX:      +z_is_reszero
ENCOD:      +z_is_reszero
ONES:       +z_is_reszero
SCA:        +z_is_reszero
SCAS:       +z_is_reszero
RDLUT:      +z_is_reszero
RDBYTE:     +z_is_reszero
RDWORD:     +z_is_reszero
RDLONG:     +z_is_reszero
RFBYTE:     +z_is_reszero
RFWORD:     +z_is_reszero
RFLONG:     +z_is_reszero
RFVAR:      +z_is_reszero
RFVARS:     +z_is_reszero
GETQX:      +z_is_reszero
GETQY:      +z_is_reszero
POP:        +z_is_reszero

# these instructions yield C=result[31]
CMPM:       +c_is_resmsb
NEG:        +c_is_resmsb
NEGC:       +c_is_resmsb
NEGNC:      +c_is_resmsb
NEGZ:       +c_is_resmsb
NEGNZ:      +c_is_resmsb
ZEROX:      +c_is_resmsb
SIGNX:      +c_is_resmsb


# the following instructions are relative branches (marked with S**):
CALLD   D,{#}S   {WC/WZ/WCZ} : +pcrel_branch
CALLPA  {#}D,{#}S            : +pcrel_branch
CALLPB  {#}D,{#}S            : +pcrel_branch
DJF     D,{#}S               : +pcrel_branch
DJNF    D,{#}S               : +pcrel_branch
DJNZ    D,{#}S               : +pcrel_branch
DJZ     D,{#}S               : +pcrel_branch
IJNZ    D,{#}S               : +pcrel_branch
IJZ     D,{#}S               : +pcrel_branch
JATN    {#}S                 : +pcrel_branch
JCT1    {#}S                 : +pcrel_branch
JCT2    {#}S                 : +pcrel_branch
JCT3    {#}S                 : +pcrel_branch
JFBW    {#}S                 : +pcrel_branch
JINT    {#}S                 : +pcrel_branch
JNATN   {#}S                 : +pcrel_branch
JNCT1   {#}S                 : +pcrel_branch
JNCT2   {#}S                 : +pcrel_branch
JNCT3   {#}S                 : +pcrel_branch
JNFBW   {#}S                 : +pcrel_branch
JNINT   {#}S                 : +pcrel_branch
JNPAT   {#}S                 : +pcrel_branch
JNQMT   {#}S                 : +pcrel_branch
JNSE1   {#}S                 : +pcrel_branch
JNSE2   {#}S                 : +pcrel_branch
JNSE3   {#}S                 : +pcrel_branch
JNSE4   {#}S                 : +pcrel_branch
JNXFI   {#}S                 : +pcrel_branch
JNXMT   {#}S                 : +pcrel_branch
JNXRL   {#}S                 : +pcrel_branch
JNXRO   {#}S                 : +pcrel_branch
JPAT    {#}S                 : +pcrel_branch
JQMT    {#}S                 : +pcrel_branch
JSE1    {#}S                 : +pcrel_branch
JSE2    {#}S                 : +pcrel_branch
JSE3    {#}S                 : +pcrel_branch
JSE4    {#}S                 : +pcrel_branch
JXFI    {#}S                 : +pcrel_branch
JXMT    {#}S                 : +pcrel_branch
JXRL    {#}S                 : +pcrel_branch
JXRO    {#}S                 : +pcrel_branch
TJF     D,{#}S               : +pcrel_branch
TJNF    D,{#}S               : +pcrel_branch
TJNS    D,{#}S               : +pcrel_branch
TJNZ    D,{#}S               : +pcrel_branch
TJS     D,{#}S               : +pcrel_branch
TJV     D,{#}S               : +pcrel_branch
TJZ     D,{#}S               : +pcrel_branch